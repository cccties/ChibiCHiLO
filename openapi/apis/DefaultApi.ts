/* tslint:disable */
/* eslint-disable */
/**
 * chibichilo-server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineObject4,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
    InlineObject5,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    InlineObject6,
    InlineObject6FromJSON,
    InlineObject6ToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse2001Books,
    InlineResponse2001BooksFromJSON,
    InlineResponse2001BooksToJSON,
    InlineResponse2001Topics,
    InlineResponse2001TopicsFromJSON,
    InlineResponse2001TopicsToJSON,
    InlineResponse2002,
    InlineResponse2002FromJSON,
    InlineResponse2002ToJSON,
    InlineResponse2003,
    InlineResponse2003FromJSON,
    InlineResponse2003ToJSON,
    InlineResponse2004,
    InlineResponse2004FromJSON,
    InlineResponse2004ToJSON,
    InlineResponse201,
    InlineResponse201FromJSON,
    InlineResponse201ToJSON,
} from '../models';

export interface ApiV2BookBookIdDeleteRequest {
    bookId: number;
}

export interface ApiV2BookBookIdGetRequest {
    bookId: number;
}

export interface ApiV2BookBookIdPutRequest {
    bookId: number;
    body?: InlineObject1;
}

export interface ApiV2BookPostRequest {
    body?: InlineObject2;
}

export interface ApiV2EventPostRequest {
    body?: InlineObject6;
}

export interface ApiV2LtiLaunchPostRequest {
    oauthVersion: string;
    oauthNonce: string;
    oauthTimestamp: string;
    oauthConsumerKey: string;
    oauthSignatureMethod: string;
    oauthSignature: string;
    ltiMessageType: string;
    ltiVersion: string;
    resourceLinkId: string;
    userId: string;
    roles: string;
    contextId: string;
    resourceLinkTitle?: string;
    contextTitle?: string;
    lisPersonNameFull?: string;
}

export interface ApiV2LtiResourceLinkLtiResourceLinkIdDeleteRequest {
    ltiResourceLinkId: string;
}

export interface ApiV2LtiResourceLinkLtiResourceLinkIdGetRequest {
    ltiResourceLinkId: string;
}

export interface ApiV2LtiResourceLinkLtiResourceLinkIdPutRequest {
    ltiResourceLinkId: string;
    body?: InlineObject;
}

export interface ApiV2ResourceResourceIdVideoTrackPostRequest {
    resourceId: number;
    body?: InlineObject5;
}

export interface ApiV2ResourceResourceIdVideoTrackVideoTrackIdDeleteRequest {
    videoTrackId: number;
    resourceId: number;
}

export interface ApiV2ResourceResourceIdVideoTrackVideoTrackIdVttGetRequest {
    videoTrackId: number;
    resourceId: number;
}

export interface ApiV2ResourcesGetRequest {
    page?: number;
    perPage?: number;
}

export interface ApiV2TopicPostRequest {
    body?: InlineObject4;
}

export interface ApiV2TopicTopicIdDeleteRequest {
    topicId: number;
}

export interface ApiV2TopicTopicIdGetRequest {
    topicId: number;
}

export interface ApiV2TopicTopicIdPutRequest {
    topicId: number;
    body?: InlineObject3;
}

export interface ApiV2TopicsGetRequest {
    page?: number;
    perPage?: number;
}

export interface ApiV2UserUserIdBooksGetRequest {
    userId: number;
    page?: number;
    perPage?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * ブックの削除
     */
    async apiV2BookBookIdDeleteRaw(requestParameters: ApiV2BookBookIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.bookId === null || requestParameters.bookId === undefined) {
            throw new runtime.RequiredError('bookId','Required parameter requestParameters.bookId was null or undefined when calling apiV2BookBookIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/book/{book_id}`.replace(`{${"book_id"}}`, encodeURIComponent(String(requestParameters.bookId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ブックの削除
     */
    async apiV2BookBookIdDelete(requestParameters: ApiV2BookBookIdDeleteRequest): Promise<void> {
        await this.apiV2BookBookIdDeleteRaw(requestParameters);
    }

    /**
     * ブックの詳細の取得
     */
    async apiV2BookBookIdGetRaw(requestParameters: ApiV2BookBookIdGetRequest): Promise<runtime.ApiResponse<InlineResponse2001Books>> {
        if (requestParameters.bookId === null || requestParameters.bookId === undefined) {
            throw new runtime.RequiredError('bookId','Required parameter requestParameters.bookId was null or undefined when calling apiV2BookBookIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/book/{book_id}`.replace(`{${"book_id"}}`, encodeURIComponent(String(requestParameters.bookId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001BooksFromJSON(jsonValue));
    }

    /**
     * ブックの詳細の取得
     */
    async apiV2BookBookIdGet(requestParameters: ApiV2BookBookIdGetRequest): Promise<InlineResponse2001Books> {
        const response = await this.apiV2BookBookIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * ブックの更新
     */
    async apiV2BookBookIdPutRaw(requestParameters: ApiV2BookBookIdPutRequest): Promise<runtime.ApiResponse<InlineResponse2001Books>> {
        if (requestParameters.bookId === null || requestParameters.bookId === undefined) {
            throw new runtime.RequiredError('bookId','Required parameter requestParameters.bookId was null or undefined when calling apiV2BookBookIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/book/{book_id}`.replace(`{${"book_id"}}`, encodeURIComponent(String(requestParameters.bookId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject1ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001BooksFromJSON(jsonValue));
    }

    /**
     * ブックの更新
     */
    async apiV2BookBookIdPut(requestParameters: ApiV2BookBookIdPutRequest): Promise<InlineResponse2001Books> {
        const response = await this.apiV2BookBookIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * ブックの作成
     */
    async apiV2BookPostRaw(requestParameters: ApiV2BookPostRequest): Promise<runtime.ApiResponse<InlineResponse2001Books>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/book`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject2ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001BooksFromJSON(jsonValue));
    }

    /**
     * ブックの作成
     */
    async apiV2BookPost(requestParameters: ApiV2BookPostRequest): Promise<InlineResponse2001Books> {
        const response = await this.apiV2BookPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * ビデオプレイヤーのイベント情報を記録 (v1互換)
     */
    async apiV2EventPostRaw(requestParameters: ApiV2EventPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/event`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject6ToJSON(requestParameters.body),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ビデオプレイヤーのイベント情報を記録 (v1互換)
     */
    async apiV2EventPost(requestParameters: ApiV2EventPostRequest): Promise<void> {
        await this.apiV2EventPostRaw(requestParameters);
    }

    /**
     * LTI ツールとして指定するエンドポイント
     */
    async apiV2LtiLaunchPostRaw(requestParameters: ApiV2LtiLaunchPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.oauthVersion === null || requestParameters.oauthVersion === undefined) {
            throw new runtime.RequiredError('oauthVersion','Required parameter requestParameters.oauthVersion was null or undefined when calling apiV2LtiLaunchPost.');
        }

        if (requestParameters.oauthNonce === null || requestParameters.oauthNonce === undefined) {
            throw new runtime.RequiredError('oauthNonce','Required parameter requestParameters.oauthNonce was null or undefined when calling apiV2LtiLaunchPost.');
        }

        if (requestParameters.oauthTimestamp === null || requestParameters.oauthTimestamp === undefined) {
            throw new runtime.RequiredError('oauthTimestamp','Required parameter requestParameters.oauthTimestamp was null or undefined when calling apiV2LtiLaunchPost.');
        }

        if (requestParameters.oauthConsumerKey === null || requestParameters.oauthConsumerKey === undefined) {
            throw new runtime.RequiredError('oauthConsumerKey','Required parameter requestParameters.oauthConsumerKey was null or undefined when calling apiV2LtiLaunchPost.');
        }

        if (requestParameters.oauthSignatureMethod === null || requestParameters.oauthSignatureMethod === undefined) {
            throw new runtime.RequiredError('oauthSignatureMethod','Required parameter requestParameters.oauthSignatureMethod was null or undefined when calling apiV2LtiLaunchPost.');
        }

        if (requestParameters.oauthSignature === null || requestParameters.oauthSignature === undefined) {
            throw new runtime.RequiredError('oauthSignature','Required parameter requestParameters.oauthSignature was null or undefined when calling apiV2LtiLaunchPost.');
        }

        if (requestParameters.ltiMessageType === null || requestParameters.ltiMessageType === undefined) {
            throw new runtime.RequiredError('ltiMessageType','Required parameter requestParameters.ltiMessageType was null or undefined when calling apiV2LtiLaunchPost.');
        }

        if (requestParameters.ltiVersion === null || requestParameters.ltiVersion === undefined) {
            throw new runtime.RequiredError('ltiVersion','Required parameter requestParameters.ltiVersion was null or undefined when calling apiV2LtiLaunchPost.');
        }

        if (requestParameters.resourceLinkId === null || requestParameters.resourceLinkId === undefined) {
            throw new runtime.RequiredError('resourceLinkId','Required parameter requestParameters.resourceLinkId was null or undefined when calling apiV2LtiLaunchPost.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling apiV2LtiLaunchPost.');
        }

        if (requestParameters.roles === null || requestParameters.roles === undefined) {
            throw new runtime.RequiredError('roles','Required parameter requestParameters.roles was null or undefined when calling apiV2LtiLaunchPost.');
        }

        if (requestParameters.contextId === null || requestParameters.contextId === undefined) {
            throw new runtime.RequiredError('contextId','Required parameter requestParameters.contextId was null or undefined when calling apiV2LtiLaunchPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.oauthVersion !== undefined) {
            formParams.append('oauth_version', requestParameters.oauthVersion as any);
        }

        if (requestParameters.oauthNonce !== undefined) {
            formParams.append('oauth_nonce', requestParameters.oauthNonce as any);
        }

        if (requestParameters.oauthTimestamp !== undefined) {
            formParams.append('oauth_timestamp', requestParameters.oauthTimestamp as any);
        }

        if (requestParameters.oauthConsumerKey !== undefined) {
            formParams.append('oauth_consumer_key', requestParameters.oauthConsumerKey as any);
        }

        if (requestParameters.oauthSignatureMethod !== undefined) {
            formParams.append('oauth_signature_method', requestParameters.oauthSignatureMethod as any);
        }

        if (requestParameters.oauthSignature !== undefined) {
            formParams.append('oauth_signature', requestParameters.oauthSignature as any);
        }

        if (requestParameters.ltiMessageType !== undefined) {
            formParams.append('lti_message_type', requestParameters.ltiMessageType as any);
        }

        if (requestParameters.ltiVersion !== undefined) {
            formParams.append('lti_version', requestParameters.ltiVersion as any);
        }

        if (requestParameters.resourceLinkId !== undefined) {
            formParams.append('resource_link_id', requestParameters.resourceLinkId as any);
        }

        if (requestParameters.userId !== undefined) {
            formParams.append('user_id', requestParameters.userId as any);
        }

        if (requestParameters.roles !== undefined) {
            formParams.append('roles', requestParameters.roles as any);
        }

        if (requestParameters.contextId !== undefined) {
            formParams.append('context_id', requestParameters.contextId as any);
        }

        if (requestParameters.resourceLinkTitle !== undefined) {
            formParams.append('resource_link_title', requestParameters.resourceLinkTitle as any);
        }

        if (requestParameters.contextTitle !== undefined) {
            formParams.append('context_title', requestParameters.contextTitle as any);
        }

        if (requestParameters.lisPersonNameFull !== undefined) {
            formParams.append('lis_person_name_full', requestParameters.lisPersonNameFull as any);
        }

        const response = await this.request({
            path: `/api/v2/lti/launch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * LTI ツールとして指定するエンドポイント
     */
    async apiV2LtiLaunchPost(requestParameters: ApiV2LtiLaunchPostRequest): Promise<void> {
        await this.apiV2LtiLaunchPostRaw(requestParameters);
    }

    /**
     * LTI Resource Link の削除
     */
    async apiV2LtiResourceLinkLtiResourceLinkIdDeleteRaw(requestParameters: ApiV2LtiResourceLinkLtiResourceLinkIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.ltiResourceLinkId === null || requestParameters.ltiResourceLinkId === undefined) {
            throw new runtime.RequiredError('ltiResourceLinkId','Required parameter requestParameters.ltiResourceLinkId was null or undefined when calling apiV2LtiResourceLinkLtiResourceLinkIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/lti/resource_link/{lti_resource_link_id}`.replace(`{${"lti_resource_link_id"}}`, encodeURIComponent(String(requestParameters.ltiResourceLinkId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * LTI Resource Link の削除
     */
    async apiV2LtiResourceLinkLtiResourceLinkIdDelete(requestParameters: ApiV2LtiResourceLinkLtiResourceLinkIdDeleteRequest): Promise<void> {
        await this.apiV2LtiResourceLinkLtiResourceLinkIdDeleteRaw(requestParameters);
    }

    /**
     * LTI Resource Link の取得
     */
    async apiV2LtiResourceLinkLtiResourceLinkIdGetRaw(requestParameters: ApiV2LtiResourceLinkLtiResourceLinkIdGetRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.ltiResourceLinkId === null || requestParameters.ltiResourceLinkId === undefined) {
            throw new runtime.RequiredError('ltiResourceLinkId','Required parameter requestParameters.ltiResourceLinkId was null or undefined when calling apiV2LtiResourceLinkLtiResourceLinkIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/lti/resource_link/{lti_resource_link_id}`.replace(`{${"lti_resource_link_id"}}`, encodeURIComponent(String(requestParameters.ltiResourceLinkId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * LTI Resource Link の取得
     */
    async apiV2LtiResourceLinkLtiResourceLinkIdGet(requestParameters: ApiV2LtiResourceLinkLtiResourceLinkIdGetRequest): Promise<InlineResponse200> {
        const response = await this.apiV2LtiResourceLinkLtiResourceLinkIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * LTI Resource Link の更新
     */
    async apiV2LtiResourceLinkLtiResourceLinkIdPutRaw(requestParameters: ApiV2LtiResourceLinkLtiResourceLinkIdPutRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.ltiResourceLinkId === null || requestParameters.ltiResourceLinkId === undefined) {
            throw new runtime.RequiredError('ltiResourceLinkId','Required parameter requestParameters.ltiResourceLinkId was null or undefined when calling apiV2LtiResourceLinkLtiResourceLinkIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/lti/resource_link/{lti_resource_link_id}`.replace(`{${"lti_resource_link_id"}}`, encodeURIComponent(String(requestParameters.ltiResourceLinkId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * LTI Resource Link の更新
     */
    async apiV2LtiResourceLinkLtiResourceLinkIdPut(requestParameters: ApiV2LtiResourceLinkLtiResourceLinkIdPutRequest): Promise<InlineResponse200> {
        const response = await this.apiV2LtiResourceLinkLtiResourceLinkIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * 字幕ファイルのアップロード
     */
    async apiV2ResourceResourceIdVideoTrackPostRaw(requestParameters: ApiV2ResourceResourceIdVideoTrackPostRequest): Promise<runtime.ApiResponse<InlineResponse201>> {
        if (requestParameters.resourceId === null || requestParameters.resourceId === undefined) {
            throw new runtime.RequiredError('resourceId','Required parameter requestParameters.resourceId was null or undefined when calling apiV2ResourceResourceIdVideoTrackPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/resource/{resource_id}/video_track`.replace(`{${"resource_id"}}`, encodeURIComponent(String(requestParameters.resourceId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject5ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse201FromJSON(jsonValue));
    }

    /**
     * 字幕ファイルのアップロード
     */
    async apiV2ResourceResourceIdVideoTrackPost(requestParameters: ApiV2ResourceResourceIdVideoTrackPostRequest): Promise<InlineResponse201> {
        const response = await this.apiV2ResourceResourceIdVideoTrackPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * 字幕の削除
     */
    async apiV2ResourceResourceIdVideoTrackVideoTrackIdDeleteRaw(requestParameters: ApiV2ResourceResourceIdVideoTrackVideoTrackIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.videoTrackId === null || requestParameters.videoTrackId === undefined) {
            throw new runtime.RequiredError('videoTrackId','Required parameter requestParameters.videoTrackId was null or undefined when calling apiV2ResourceResourceIdVideoTrackVideoTrackIdDelete.');
        }

        if (requestParameters.resourceId === null || requestParameters.resourceId === undefined) {
            throw new runtime.RequiredError('resourceId','Required parameter requestParameters.resourceId was null or undefined when calling apiV2ResourceResourceIdVideoTrackVideoTrackIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/resource/{resource_id}/video_track/{video_track_id}`.replace(`{${"video_track_id"}}`, encodeURIComponent(String(requestParameters.videoTrackId))).replace(`{${"resource_id"}}`, encodeURIComponent(String(requestParameters.resourceId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 字幕の削除
     */
    async apiV2ResourceResourceIdVideoTrackVideoTrackIdDelete(requestParameters: ApiV2ResourceResourceIdVideoTrackVideoTrackIdDeleteRequest): Promise<void> {
        await this.apiV2ResourceResourceIdVideoTrackVideoTrackIdDeleteRaw(requestParameters);
    }

    /**
     * 字幕の取得
     */
    async apiV2ResourceResourceIdVideoTrackVideoTrackIdVttGetRaw(requestParameters: ApiV2ResourceResourceIdVideoTrackVideoTrackIdVttGetRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.videoTrackId === null || requestParameters.videoTrackId === undefined) {
            throw new runtime.RequiredError('videoTrackId','Required parameter requestParameters.videoTrackId was null or undefined when calling apiV2ResourceResourceIdVideoTrackVideoTrackIdVttGet.');
        }

        if (requestParameters.resourceId === null || requestParameters.resourceId === undefined) {
            throw new runtime.RequiredError('resourceId','Required parameter requestParameters.resourceId was null or undefined when calling apiV2ResourceResourceIdVideoTrackVideoTrackIdVttGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/resource/{resource_id}/video_track/{video_track_id}/vtt`.replace(`{${"video_track_id"}}`, encodeURIComponent(String(requestParameters.videoTrackId))).replace(`{${"resource_id"}}`, encodeURIComponent(String(requestParameters.resourceId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 字幕の取得
     */
    async apiV2ResourceResourceIdVideoTrackVideoTrackIdVttGet(requestParameters: ApiV2ResourceResourceIdVideoTrackVideoTrackIdVttGetRequest): Promise<object> {
        const response = await this.apiV2ResourceResourceIdVideoTrackVideoTrackIdVttGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * リソース一覧
     */
    async apiV2ResourcesGetRaw(requestParameters: ApiV2ResourcesGetRequest): Promise<runtime.ApiResponse<InlineResponse2003>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/resources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2003FromJSON(jsonValue));
    }

    /**
     * リソース一覧
     */
    async apiV2ResourcesGet(requestParameters: ApiV2ResourcesGetRequest): Promise<InlineResponse2003> {
        const response = await this.apiV2ResourcesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * セッション情報
     */
    async apiV2SessionGetRaw(): Promise<runtime.ApiResponse<InlineResponse2004>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/session`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2004FromJSON(jsonValue));
    }

    /**
     * セッション情報
     */
    async apiV2SessionGet(): Promise<InlineResponse2004> {
        const response = await this.apiV2SessionGetRaw();
        return await response.value();
    }

    /**
     * トピックの作成
     */
    async apiV2TopicPostRaw(requestParameters: ApiV2TopicPostRequest): Promise<runtime.ApiResponse<InlineResponse2001Topics>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/topic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject4ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001TopicsFromJSON(jsonValue));
    }

    /**
     * トピックの作成
     */
    async apiV2TopicPost(requestParameters: ApiV2TopicPostRequest): Promise<InlineResponse2001Topics> {
        const response = await this.apiV2TopicPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * トピックの削除
     */
    async apiV2TopicTopicIdDeleteRaw(requestParameters: ApiV2TopicTopicIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.topicId === null || requestParameters.topicId === undefined) {
            throw new runtime.RequiredError('topicId','Required parameter requestParameters.topicId was null or undefined when calling apiV2TopicTopicIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/topic/{topic_id}`.replace(`{${"topic_id"}}`, encodeURIComponent(String(requestParameters.topicId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * トピックの削除
     */
    async apiV2TopicTopicIdDelete(requestParameters: ApiV2TopicTopicIdDeleteRequest): Promise<void> {
        await this.apiV2TopicTopicIdDeleteRaw(requestParameters);
    }

    /**
     * トピックの詳細の取得
     */
    async apiV2TopicTopicIdGetRaw(requestParameters: ApiV2TopicTopicIdGetRequest): Promise<runtime.ApiResponse<InlineResponse2001Topics>> {
        if (requestParameters.topicId === null || requestParameters.topicId === undefined) {
            throw new runtime.RequiredError('topicId','Required parameter requestParameters.topicId was null or undefined when calling apiV2TopicTopicIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/topic/{topic_id}`.replace(`{${"topic_id"}}`, encodeURIComponent(String(requestParameters.topicId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001TopicsFromJSON(jsonValue));
    }

    /**
     * トピックの詳細の取得
     */
    async apiV2TopicTopicIdGet(requestParameters: ApiV2TopicTopicIdGetRequest): Promise<InlineResponse2001Topics> {
        const response = await this.apiV2TopicTopicIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * トピックの更新
     */
    async apiV2TopicTopicIdPutRaw(requestParameters: ApiV2TopicTopicIdPutRequest): Promise<runtime.ApiResponse<InlineResponse2001Topics>> {
        if (requestParameters.topicId === null || requestParameters.topicId === undefined) {
            throw new runtime.RequiredError('topicId','Required parameter requestParameters.topicId was null or undefined when calling apiV2TopicTopicIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/topic/{topic_id}`.replace(`{${"topic_id"}}`, encodeURIComponent(String(requestParameters.topicId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject3ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001TopicsFromJSON(jsonValue));
    }

    /**
     * トピックの更新
     */
    async apiV2TopicTopicIdPut(requestParameters: ApiV2TopicTopicIdPutRequest): Promise<InlineResponse2001Topics> {
        const response = await this.apiV2TopicTopicIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * トピック一覧
     */
    async apiV2TopicsGetRaw(requestParameters: ApiV2TopicsGetRequest): Promise<runtime.ApiResponse<InlineResponse2002>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/topics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * トピック一覧
     */
    async apiV2TopicsGet(requestParameters: ApiV2TopicsGetRequest): Promise<InlineResponse2002> {
        const response = await this.apiV2TopicsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * 作成したブックの一覧
     */
    async apiV2UserUserIdBooksGetRaw(requestParameters: ApiV2UserUserIdBooksGetRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling apiV2UserUserIdBooksGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/user/{user_id}/books`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * 作成したブックの一覧
     */
    async apiV2UserUserIdBooksGet(requestParameters: ApiV2UserUserIdBooksGetRequest): Promise<InlineResponse2001> {
        const response = await this.apiV2UserUserIdBooksGetRaw(requestParameters);
        return await response.value();
    }

}
