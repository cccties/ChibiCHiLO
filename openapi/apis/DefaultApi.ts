/* tslint:disable */
/* eslint-disable */
/**
 * chibichilo-server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineObject4,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
    InlineObject5,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse2001Books,
    InlineResponse2001BooksFromJSON,
    InlineResponse2001BooksToJSON,
    InlineResponse2001Topics,
    InlineResponse2001TopicsFromJSON,
    InlineResponse2001TopicsToJSON,
    InlineResponse2002,
    InlineResponse2002FromJSON,
    InlineResponse2002ToJSON,
    InlineResponse2003,
    InlineResponse2003FromJSON,
    InlineResponse2003ToJSON,
} from '../models';

export interface ApiV2BookBookIdDeleteRequest {
    bookId: number;
}

export interface ApiV2BookBookIdGetRequest {
    bookId: number;
}

export interface ApiV2BookBookIdPutRequest {
    bookId: number;
    body?: InlineObject2;
}

export interface ApiV2BookPostRequest {
    body?: InlineObject3;
}

export interface ApiV2LtiLaunchPostRequest {
    body?: InlineObject;
}

export interface ApiV2LtiResourceLinkLtiResourceLinkIdDeleteRequest {
    ltiResourceLinkId: string;
}

export interface ApiV2LtiResourceLinkLtiResourceLinkIdGetRequest {
    ltiResourceLinkId: string;
}

export interface ApiV2LtiResourceLinkLtiResourceLinkIdPutRequest {
    ltiResourceLinkId: string;
    body?: InlineObject1;
}

export interface ApiV2TopicPostRequest {
    body?: InlineObject5;
}

export interface ApiV2TopicTopicIdDeleteRequest {
    topicId: number;
}

export interface ApiV2TopicTopicIdGetRequest {
    topicId: number;
}

export interface ApiV2TopicTopicIdPutRequest {
    topicId: number;
    body?: InlineObject4;
}

export interface ApiV2TopicsGetRequest {
    page?: number;
    perPage?: number;
}

export interface ApiV2UserUserIdBooksGetRequest {
    userId: number;
    page?: number;
    perPage?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * ブックの削除
     */
    async apiV2BookBookIdDeleteRaw(requestParameters: ApiV2BookBookIdDeleteRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.bookId === null || requestParameters.bookId === undefined) {
            throw new runtime.RequiredError('bookId','Required parameter requestParameters.bookId was null or undefined when calling apiV2BookBookIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/book/{book_id}`.replace(`{${"book_id"}}`, encodeURIComponent(String(requestParameters.bookId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * ブックの削除
     */
    async apiV2BookBookIdDelete(requestParameters: ApiV2BookBookIdDeleteRequest): Promise<object> {
        const response = await this.apiV2BookBookIdDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * ブックの詳細の取得
     */
    async apiV2BookBookIdGetRaw(requestParameters: ApiV2BookBookIdGetRequest): Promise<runtime.ApiResponse<InlineResponse2001Books>> {
        if (requestParameters.bookId === null || requestParameters.bookId === undefined) {
            throw new runtime.RequiredError('bookId','Required parameter requestParameters.bookId was null or undefined when calling apiV2BookBookIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/book/{book_id}`.replace(`{${"book_id"}}`, encodeURIComponent(String(requestParameters.bookId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001BooksFromJSON(jsonValue));
    }

    /**
     * ブックの詳細の取得
     */
    async apiV2BookBookIdGet(requestParameters: ApiV2BookBookIdGetRequest): Promise<InlineResponse2001Books> {
        const response = await this.apiV2BookBookIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * ブックの更新
     */
    async apiV2BookBookIdPutRaw(requestParameters: ApiV2BookBookIdPutRequest): Promise<runtime.ApiResponse<InlineResponse2001Books>> {
        if (requestParameters.bookId === null || requestParameters.bookId === undefined) {
            throw new runtime.RequiredError('bookId','Required parameter requestParameters.bookId was null or undefined when calling apiV2BookBookIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/book/{book_id}`.replace(`{${"book_id"}}`, encodeURIComponent(String(requestParameters.bookId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject2ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001BooksFromJSON(jsonValue));
    }

    /**
     * ブックの更新
     */
    async apiV2BookBookIdPut(requestParameters: ApiV2BookBookIdPutRequest): Promise<InlineResponse2001Books> {
        const response = await this.apiV2BookBookIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * ブックの作成
     */
    async apiV2BookPostRaw(requestParameters: ApiV2BookPostRequest): Promise<runtime.ApiResponse<InlineResponse2001Books>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/book`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject3ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001BooksFromJSON(jsonValue));
    }

    /**
     * ブックの作成
     */
    async apiV2BookPost(requestParameters: ApiV2BookPostRequest): Promise<InlineResponse2001Books> {
        const response = await this.apiV2BookPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * LTI ツールとして指定するエンドポイント
     */
    async apiV2LtiLaunchPostRaw(requestParameters: ApiV2LtiLaunchPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/lti/launch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObjectToJSON(requestParameters.body),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * LTI ツールとして指定するエンドポイント
     */
    async apiV2LtiLaunchPost(requestParameters: ApiV2LtiLaunchPostRequest): Promise<void> {
        await this.apiV2LtiLaunchPostRaw(requestParameters);
    }

    /**
     * LTI Resource Link の削除
     */
    async apiV2LtiResourceLinkLtiResourceLinkIdDeleteRaw(requestParameters: ApiV2LtiResourceLinkLtiResourceLinkIdDeleteRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.ltiResourceLinkId === null || requestParameters.ltiResourceLinkId === undefined) {
            throw new runtime.RequiredError('ltiResourceLinkId','Required parameter requestParameters.ltiResourceLinkId was null or undefined when calling apiV2LtiResourceLinkLtiResourceLinkIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/lti/resource_link/{lti_resource_link_id}`.replace(`{${"lti_resource_link_id"}}`, encodeURIComponent(String(requestParameters.ltiResourceLinkId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * LTI Resource Link の削除
     */
    async apiV2LtiResourceLinkLtiResourceLinkIdDelete(requestParameters: ApiV2LtiResourceLinkLtiResourceLinkIdDeleteRequest): Promise<object> {
        const response = await this.apiV2LtiResourceLinkLtiResourceLinkIdDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * LTI Resource Link の取得
     */
    async apiV2LtiResourceLinkLtiResourceLinkIdGetRaw(requestParameters: ApiV2LtiResourceLinkLtiResourceLinkIdGetRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.ltiResourceLinkId === null || requestParameters.ltiResourceLinkId === undefined) {
            throw new runtime.RequiredError('ltiResourceLinkId','Required parameter requestParameters.ltiResourceLinkId was null or undefined when calling apiV2LtiResourceLinkLtiResourceLinkIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/lti/resource_link/{lti_resource_link_id}`.replace(`{${"lti_resource_link_id"}}`, encodeURIComponent(String(requestParameters.ltiResourceLinkId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * LTI Resource Link の取得
     */
    async apiV2LtiResourceLinkLtiResourceLinkIdGet(requestParameters: ApiV2LtiResourceLinkLtiResourceLinkIdGetRequest): Promise<InlineResponse200> {
        const response = await this.apiV2LtiResourceLinkLtiResourceLinkIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * LTI Resource Link の更新
     */
    async apiV2LtiResourceLinkLtiResourceLinkIdPutRaw(requestParameters: ApiV2LtiResourceLinkLtiResourceLinkIdPutRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.ltiResourceLinkId === null || requestParameters.ltiResourceLinkId === undefined) {
            throw new runtime.RequiredError('ltiResourceLinkId','Required parameter requestParameters.ltiResourceLinkId was null or undefined when calling apiV2LtiResourceLinkLtiResourceLinkIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/lti/resource_link/{lti_resource_link_id}`.replace(`{${"lti_resource_link_id"}}`, encodeURIComponent(String(requestParameters.ltiResourceLinkId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject1ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * LTI Resource Link の更新
     */
    async apiV2LtiResourceLinkLtiResourceLinkIdPut(requestParameters: ApiV2LtiResourceLinkLtiResourceLinkIdPutRequest): Promise<InlineResponse200> {
        const response = await this.apiV2LtiResourceLinkLtiResourceLinkIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * セッション情報
     */
    async apiV2SessionGetRaw(): Promise<runtime.ApiResponse<InlineResponse2003>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/session`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2003FromJSON(jsonValue));
    }

    /**
     * セッション情報
     */
    async apiV2SessionGet(): Promise<InlineResponse2003> {
        const response = await this.apiV2SessionGetRaw();
        return await response.value();
    }

    /**
     * トピックの作成
     */
    async apiV2TopicPostRaw(requestParameters: ApiV2TopicPostRequest): Promise<runtime.ApiResponse<InlineResponse2001Topics>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/topic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject5ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001TopicsFromJSON(jsonValue));
    }

    /**
     * トピックの作成
     */
    async apiV2TopicPost(requestParameters: ApiV2TopicPostRequest): Promise<InlineResponse2001Topics> {
        const response = await this.apiV2TopicPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * トピックの削除
     */
    async apiV2TopicTopicIdDeleteRaw(requestParameters: ApiV2TopicTopicIdDeleteRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.topicId === null || requestParameters.topicId === undefined) {
            throw new runtime.RequiredError('topicId','Required parameter requestParameters.topicId was null or undefined when calling apiV2TopicTopicIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/topic/{topic_id}`.replace(`{${"topic_id"}}`, encodeURIComponent(String(requestParameters.topicId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * トピックの削除
     */
    async apiV2TopicTopicIdDelete(requestParameters: ApiV2TopicTopicIdDeleteRequest): Promise<object> {
        const response = await this.apiV2TopicTopicIdDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * トピックの詳細の取得
     */
    async apiV2TopicTopicIdGetRaw(requestParameters: ApiV2TopicTopicIdGetRequest): Promise<runtime.ApiResponse<InlineResponse2001Topics>> {
        if (requestParameters.topicId === null || requestParameters.topicId === undefined) {
            throw new runtime.RequiredError('topicId','Required parameter requestParameters.topicId was null or undefined when calling apiV2TopicTopicIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/topic/{topic_id}`.replace(`{${"topic_id"}}`, encodeURIComponent(String(requestParameters.topicId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001TopicsFromJSON(jsonValue));
    }

    /**
     * トピックの詳細の取得
     */
    async apiV2TopicTopicIdGet(requestParameters: ApiV2TopicTopicIdGetRequest): Promise<InlineResponse2001Topics> {
        const response = await this.apiV2TopicTopicIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * トピックの更新
     */
    async apiV2TopicTopicIdPutRaw(requestParameters: ApiV2TopicTopicIdPutRequest): Promise<runtime.ApiResponse<InlineResponse2001Topics>> {
        if (requestParameters.topicId === null || requestParameters.topicId === undefined) {
            throw new runtime.RequiredError('topicId','Required parameter requestParameters.topicId was null or undefined when calling apiV2TopicTopicIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/topic/{topic_id}`.replace(`{${"topic_id"}}`, encodeURIComponent(String(requestParameters.topicId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject4ToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001TopicsFromJSON(jsonValue));
    }

    /**
     * トピックの更新
     */
    async apiV2TopicTopicIdPut(requestParameters: ApiV2TopicTopicIdPutRequest): Promise<InlineResponse2001Topics> {
        const response = await this.apiV2TopicTopicIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * トピック一覧
     */
    async apiV2TopicsGetRaw(requestParameters: ApiV2TopicsGetRequest): Promise<runtime.ApiResponse<InlineResponse2002>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/topics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * トピック一覧
     */
    async apiV2TopicsGet(requestParameters: ApiV2TopicsGetRequest): Promise<InlineResponse2002> {
        const response = await this.apiV2TopicsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * 作成したブックの一覧
     */
    async apiV2UserUserIdBooksGetRaw(requestParameters: ApiV2UserUserIdBooksGetRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling apiV2UserUserIdBooksGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/user/{user_id}/books`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * 作成したブックの一覧
     */
    async apiV2UserUserIdBooksGet(requestParameters: ApiV2UserUserIdBooksGetRequest): Promise<InlineResponse2001> {
        const response = await this.apiV2UserUserIdBooksGetRaw(requestParameters);
        return await response.value();
    }

}
